/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    AuthorRole,
    AuthorSetting,
} from '@interface/defaultModels.ts';

export interface AdminChangeManuscriptRevisionTitleRequest {
    manuscriptId: string;
    revisionId: string;
    newTitle: string;
    reason: string;
    additionalReason?: string;
}

export interface AdminChangeManuscriptTitleRequest {
    manuscriptId: string;
    newTitle: string;
}

export interface AdminDeleteManuscriptRequest {
    manuscriptId: string;
    reason: string;
    additionalReason?: string;
}

export interface AdminDeleteManuscriptRevisionRequest {
    manuscriptId: string;
    revisionId: string;
    reason: string;
    additionalReason?: string;
}

export interface AdminGetAnalyzedDataRequest {
    manuscriptId: string;
    revisionId: string;
    models?: string;
    sections?: string;
}

export interface AdminGetAuthorRequest {
    authorId: string;
}

export interface AdminGetAuthorHistoryRequest {
    authorId: string;
    startTime?: string;
    endTime?: string;
    page?: number;
    pageSize?: number;
}

export interface AdminGetAuthorsRequest {
    roles?: string;
    page?: number;
    pageSize?: number;
}

export interface AdminGetManuscriptRevisionsRequest {
    manuscriptId: string;
    page?: number;
    pageSize?: number;
}

export interface AdminGetManuscriptsRequest {
    authorId?: string;
    sortBy?: AdminGetManuscriptsSortByEnum;
    page?: number;
    pageSize?: number;
}

export interface AdminSetRestrictedModelsRequest {
    authorId: string;
    newRestrictedModels: boolean;
}

export interface AdminSetRoleRequest {
    authorId: string;
    newRole: AuthorRole;
}

export interface ChangeManuscriptRevisionTitleRequest {
    manuscriptId: string;
    revisionId: string;
    newTitle: string;
}

export interface ChangeManuscriptTitleRequest {
    manuscriptId: string;
    newTitle: string;
}

export interface DeleteManuscriptRequest {
    manuscriptId: string;
    reason: string;
    additionalReason?: string;
}

export interface DeleteManuscriptRevisionRequest {
    manuscriptId: string;
    revisionId: string;
}

export interface DeleteSettingRequest {
    name: string;
}

export interface DeleteTextRequest {
    language: string;
    name: string;
}

export interface GetAnalyzedDataRequest {
    manuscriptId: string;
    revisionId: string;
    models?: string;
    sections?: string;
}

export interface GetArticlesRequest {
    report: number;
}

export interface GetCharacteristicRequest {
    report: number;
}

export interface GetHistoryRequest {
    startTime?: string;
    endTime?: string;
    page?: number;
    pageSize?: number;
}

export interface GetManuscriptRevisionsRequest {
    manuscriptId: string;
    page?: number;
    pageSize?: number;
}

export interface GetManuscriptsRequest {
    page?: number;
    pageSize?: number;
}

export interface GetRecommendationRequest {
    metricId: number;
    genre: string;
    audience: string;
    metricValue: number;
}

export interface GetSimilarBookDataRequest {
    isbn: number;
    models?: string;
    sections?: string;
}

export interface GetSimilarBookMetadataRequest {
    isbn: number;
}

export interface GetTextsRequest {
    language: string;
    names?: string;
}

export interface GetTipsRequest {
    report: number;
}

export interface SaveSettingsRequest {
    authorSetting?: Array<AuthorSetting>;
}

export interface SaveTextRequest {
    language: string;
    name: string;
    text: string;
}

export interface SetAuthorEmailRequest {
    email: string;
}

export interface UploadManuscriptRequest {
    manuscriptTitle: string;
    targetAudience: string;
    targetGenre: string;
    fileType: UploadManuscriptFileTypeEnum;
    file: Blob;
    revisionTitle?: string;
}

export interface UploadManuscriptRevisionRequest {
    manuscriptId: string;
    targetAudience: string;
    targetGenre: string;
    fileType: UploadManuscriptRevisionFileTypeEnum;
    file: Blob;
    revisionTitle?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum AdminGetManuscriptsSortByEnum {
    GlobalScore = 'globalScore',
    LatestRevision = 'latestRevision'
}
/**
 * @export
 * @enum {string}
 */
export enum UploadManuscriptFileTypeEnum {
    Text = 'TEXT',
    Docx = 'DOCX',
    Epub = 'EPUB'
}
/**
 * @export
 * @enum {string}
 */
export enum UploadManuscriptRevisionFileTypeEnum {
    Text = 'TEXT',
    Docx = 'DOCX',
    Epub = 'EPUB'
}
