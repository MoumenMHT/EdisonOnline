/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorSetting,
  AuthorStatus,
  CategoryInfo,
  ManuscriptUploadResponse,
  ModelResultData,
  PageOfAuthor,
  PageOfDetailedHistoryEvent,
  PageOfHistoryEvent,
  PageOfManuscript,
  PageOfManuscriptRevision,
  Recommendation,
} from '../models';
import {
    AuthorSettingFromJSON,
    AuthorSettingToJSON,
    AuthorStatusFromJSON,
    AuthorStatusToJSON,
    CategoryInfoFromJSON,
    CategoryInfoToJSON,
    ManuscriptUploadResponseFromJSON,
    ManuscriptUploadResponseToJSON,
    ModelResultDataFromJSON,
    ModelResultDataToJSON,
    PageOfAuthorFromJSON,
    PageOfAuthorToJSON,
    PageOfDetailedHistoryEventFromJSON,
    PageOfDetailedHistoryEventToJSON,
    PageOfHistoryEventFromJSON,
    PageOfHistoryEventToJSON,
    PageOfManuscriptFromJSON,
    PageOfManuscriptToJSON,
    PageOfManuscriptRevisionFromJSON,
    PageOfManuscriptRevisionToJSON,
    RecommendationFromJSON,
    RecommendationToJSON,
} from '../models';

export interface AdminChangeManuscriptRevisionTitleRequest {
    manuscriptId: string;
    revisionId: string;
    newTitle: string;
    reason: string;
    additionalReason?: string;
}

export interface AdminChangeManuscriptTitleRequest {
    manuscriptId: string;
    newTitle: string;
}

export interface AdminDeleteManuscriptRequest {
    manuscriptId: string;
    reason: string;
    additionalReason?: string;
}

export interface AdminDeleteManuscriptRevisionRequest {
    manuscriptId: string;
    revisionId: string;
    reason: string;
    additionalReason?: string;
}

export interface AdminGetAnalyzedDataRequest {
    manuscriptId: string;
    revisionId: string;
    models?: string;
    sections?: string;
}

export interface AdminGetHistoryRequest {
    authorId: string;
    page?: number;
    pageSize?: number;
}

export interface AdminGetManuscriptRevisionsRequest {
    manuscriptId: string;
    page?: number;
    pageSize?: number;
}

export interface AdminGetManuscriptsRequest {
    authorId?: string;
    sortBy?: AdminGetManuscriptsSortByEnum;
    page?: number;
    pageSize?: number;
}

export interface ChangeManuscriptRevisionTitleRequest {
    manuscriptId: string;
    revisionId: string;
    newTitle: string;
}

export interface ChangeManuscriptTitleRequest {
    manuscriptId: string;
    newTitle: string;
}

export interface DeleteManuscriptRequest {
    manuscriptId: string;
    reason: string;
    additionalReason?: string;
}

export interface DeleteManuscriptRevisionRequest {
    manuscriptId: string;
    revisionId: string;
}

export interface DeleteSettingRequest {
    name: string;
}

export interface GetAllAuthorsRequest {
    page?: number;
    pageSize?: number;
}

export interface GetAnalyzedDataRequest {
    manuscriptId: string;
    revisionId: string;
    models?: string;
    sections?: string;
}

export interface GetHistoryRequest {
    page?: number;
    pageSize?: number;
}

export interface GetManuscriptRevisionsRequest {
    manuscriptId: string;
    page?: number;
    pageSize?: number;
}

export interface GetManuscriptsRequest {
    page?: number;
    pageSize?: number;
}

export interface GetRecommendationRequest {
    metricId: number;
    genre: string;
    audience: string;
    metricValue: number;
}

export interface SaveSettingsRequest {
    authorSetting?: Array<AuthorSetting>;
}

export interface UploadManuscriptRequest {
    manuscriptTitle: string;
    targetAudience: string;
    targetGenre: string;
    fileType: UploadManuscriptFileTypeEnum;
    file: Blob;
    revisionTitle?: string;
}

export interface UploadManuscriptRevisionRequest {
    manuscriptId: string;
    targetAudience: string;
    targetGenre: string;
    fileType: UploadManuscriptRevisionFileTypeEnum;
    file: Blob;
    revisionTitle?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Change the title of a manuscript revision
     */
    async adminChangeManuscriptRevisionTitleRaw(requestParameters: AdminChangeManuscriptRevisionTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling adminChangeManuscriptRevisionTitle.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling adminChangeManuscriptRevisionTitle.');
        }

        if (requestParameters.newTitle === null || requestParameters.newTitle === undefined) {
            throw new runtime.RequiredError('newTitle','Required parameter requestParameters.newTitle was null or undefined when calling adminChangeManuscriptRevisionTitle.');
        }

        if (requestParameters.reason === null || requestParameters.reason === undefined) {
            throw new runtime.RequiredError('reason','Required parameter requestParameters.reason was null or undefined when calling adminChangeManuscriptRevisionTitle.');
        }

        const queryParameters: any = {};

        if (requestParameters.newTitle !== undefined) {
            queryParameters['newTitle'] = requestParameters.newTitle;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        if (requestParameters.additionalReason !== undefined) {
            queryParameters['additionalReason'] = requestParameters.additionalReason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/manuscripts/{manuscriptId}/revisions/{revisionId}/title`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))).replace(`{${"revisionId"}}`, encodeURIComponent(String(requestParameters.revisionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the title of a manuscript revision
     */
    async adminChangeManuscriptRevisionTitle(requestParameters: AdminChangeManuscriptRevisionTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminChangeManuscriptRevisionTitleRaw(requestParameters, initOverrides);
    }

    /**
     * Change the title of a manuscript
     */
    async adminChangeManuscriptTitleRaw(requestParameters: AdminChangeManuscriptTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling adminChangeManuscriptTitle.');
        }

        if (requestParameters.newTitle === null || requestParameters.newTitle === undefined) {
            throw new runtime.RequiredError('newTitle','Required parameter requestParameters.newTitle was null or undefined when calling adminChangeManuscriptTitle.');
        }

        const queryParameters: any = {};

        if (requestParameters.newTitle !== undefined) {
            queryParameters['newTitle'] = requestParameters.newTitle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/manuscripts/{manuscriptId}/title`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the title of a manuscript
     */
    async adminChangeManuscriptTitle(requestParameters: AdminChangeManuscriptTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminChangeManuscriptTitleRaw(requestParameters, initOverrides);
    }

    /**
     * deletes the manuscript with the given id
     */
    async adminDeleteManuscriptRaw(requestParameters: AdminDeleteManuscriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling adminDeleteManuscript.');
        }

        if (requestParameters.reason === null || requestParameters.reason === undefined) {
            throw new runtime.RequiredError('reason','Required parameter requestParameters.reason was null or undefined when calling adminDeleteManuscript.');
        }

        const queryParameters: any = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        if (requestParameters.additionalReason !== undefined) {
            queryParameters['additionalReason'] = requestParameters.additionalReason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/manuscripts/{manuscriptId}`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes the manuscript with the given id
     */
    async adminDeleteManuscript(requestParameters: AdminDeleteManuscriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminDeleteManuscriptRaw(requestParameters, initOverrides);
    }

    /**
     * deletes the manuscript with the given id (dangerous - does not check ownership)
     */
    async adminDeleteManuscriptRevisionRaw(requestParameters: AdminDeleteManuscriptRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling adminDeleteManuscriptRevision.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling adminDeleteManuscriptRevision.');
        }

        if (requestParameters.reason === null || requestParameters.reason === undefined) {
            throw new runtime.RequiredError('reason','Required parameter requestParameters.reason was null or undefined when calling adminDeleteManuscriptRevision.');
        }

        const queryParameters: any = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        if (requestParameters.additionalReason !== undefined) {
            queryParameters['additionalReason'] = requestParameters.additionalReason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/manuscripts/{manuscriptId}/revisions/{revisionId}`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))).replace(`{${"revisionId"}}`, encodeURIComponent(String(requestParameters.revisionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes the manuscript with the given id (dangerous - does not check ownership)
     */
    async adminDeleteManuscriptRevision(requestParameters: AdminDeleteManuscriptRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminDeleteManuscriptRevisionRaw(requestParameters, initOverrides);
    }

    /**
     * returns the analyzed data for a revision
     */
    async adminGetAnalyzedDataRaw(requestParameters: AdminGetAnalyzedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelResultData>>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling adminGetAnalyzedData.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling adminGetAnalyzedData.');
        }

        const queryParameters: any = {};

        if (requestParameters.models !== undefined) {
            queryParameters['models'] = requestParameters.models;
        }

        if (requestParameters.sections !== undefined) {
            queryParameters['sections'] = requestParameters.sections;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/manuscripts/{manuscriptId}/revisions/{revisionId}/`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))).replace(`{${"revisionId"}}`, encodeURIComponent(String(requestParameters.revisionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelResultDataFromJSON));
    }

    /**
     * returns the analyzed data for a revision
     */
    async adminGetAnalyzedData(requestParameters: AdminGetAnalyzedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelResultData>> {
        const response = await this.adminGetAnalyzedDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lists of events for an author
     */
    async adminGetHistoryRaw(requestParameters: AdminGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfDetailedHistoryEvent>> {
        if (requestParameters.authorId === null || requestParameters.authorId === undefined) {
            throw new runtime.RequiredError('authorId','Required parameter requestParameters.authorId was null or undefined when calling adminGetHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/authors/{authorId}/history/`.replace(`{${"authorId"}}`, encodeURIComponent(String(requestParameters.authorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfDetailedHistoryEventFromJSON(jsonValue));
    }

    /**
     * lists of events for an author
     */
    async adminGetHistory(requestParameters: AdminGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfDetailedHistoryEvent> {
        const response = await this.adminGetHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lists manuscript revisions
     */
    async adminGetManuscriptRevisionsRaw(requestParameters: AdminGetManuscriptRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfManuscriptRevision>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling adminGetManuscriptRevisions.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/manuscripts/{manuscriptId}/revisions/`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfManuscriptRevisionFromJSON(jsonValue));
    }

    /**
     * lists manuscript revisions
     */
    async adminGetManuscriptRevisions(requestParameters: AdminGetManuscriptRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfManuscriptRevision> {
        const response = await this.adminGetManuscriptRevisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * return all manuscripts (optionally limit to specific author)
     */
    async adminGetManuscriptsRaw(requestParameters: AdminGetManuscriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfManuscript>> {
        const queryParameters: any = {};

        if (requestParameters.authorId !== undefined) {
            queryParameters['authorId'] = requestParameters.authorId;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/manuscripts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfManuscriptFromJSON(jsonValue));
    }

    /**
     * return all manuscripts (optionally limit to specific author)
     */
    async adminGetManuscripts(requestParameters: AdminGetManuscriptsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfManuscript> {
        const response = await this.adminGetManuscriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the title of a manuscript revision
     */
    async changeManuscriptRevisionTitleRaw(requestParameters: ChangeManuscriptRevisionTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling changeManuscriptRevisionTitle.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling changeManuscriptRevisionTitle.');
        }

        if (requestParameters.newTitle === null || requestParameters.newTitle === undefined) {
            throw new runtime.RequiredError('newTitle','Required parameter requestParameters.newTitle was null or undefined when calling changeManuscriptRevisionTitle.');
        }

        const queryParameters: any = {};

        if (requestParameters.newTitle !== undefined) {
            queryParameters['newTitle'] = requestParameters.newTitle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/manuscripts/{manuscriptId}/revisions/{revisionId}/title`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))).replace(`{${"revisionId"}}`, encodeURIComponent(String(requestParameters.revisionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the title of a manuscript revision
     */
    async changeManuscriptRevisionTitle(requestParameters: ChangeManuscriptRevisionTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeManuscriptRevisionTitleRaw(requestParameters, initOverrides);
    }

    /**
     * Change the title of a manuscript
     */
    async changeManuscriptTitleRaw(requestParameters: ChangeManuscriptTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling changeManuscriptTitle.');
        }

        if (requestParameters.newTitle === null || requestParameters.newTitle === undefined) {
            throw new runtime.RequiredError('newTitle','Required parameter requestParameters.newTitle was null or undefined when calling changeManuscriptTitle.');
        }

        const queryParameters: any = {};

        if (requestParameters.newTitle !== undefined) {
            queryParameters['newTitle'] = requestParameters.newTitle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/manuscripts/{manuscriptId}/title`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the title of a manuscript
     */
    async changeManuscriptTitle(requestParameters: ChangeManuscriptTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeManuscriptTitleRaw(requestParameters, initOverrides);
    }

    /**
     * deletes the manuscript with the given id (if the logged-in user is owner)
     */
    async deleteManuscriptRaw(requestParameters: DeleteManuscriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling deleteManuscript.');
        }

        if (requestParameters.reason === null || requestParameters.reason === undefined) {
            throw new runtime.RequiredError('reason','Required parameter requestParameters.reason was null or undefined when calling deleteManuscript.');
        }

        const queryParameters: any = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        if (requestParameters.additionalReason !== undefined) {
            queryParameters['additionalReason'] = requestParameters.additionalReason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/manuscripts/{manuscriptId}`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes the manuscript with the given id (if the logged-in user is owner)
     */
    async deleteManuscript(requestParameters: DeleteManuscriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteManuscriptRaw(requestParameters, initOverrides);
    }

    /**
     * deletes the manuscript revision with the given ids (if the logged-in user is owner)
     */
    async deleteManuscriptRevisionRaw(requestParameters: DeleteManuscriptRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling deleteManuscriptRevision.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling deleteManuscriptRevision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/manuscripts/{manuscriptId}/revisions/{revisionId}`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))).replace(`{${"revisionId"}}`, encodeURIComponent(String(requestParameters.revisionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes the manuscript revision with the given ids (if the logged-in user is owner)
     */
    async deleteManuscriptRevision(requestParameters: DeleteManuscriptRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteManuscriptRevisionRaw(requestParameters, initOverrides);
    }

    /**
     * deletes a specific setting for the logged-in user
     */
    async deleteSettingRaw(requestParameters: DeleteSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/settings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes a specific setting for the logged-in user
     */
    async deleteSetting(requestParameters: DeleteSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSettingRaw(requestParameters, initOverrides);
    }

    /**
     * deletes all settings for the logged-in user
     */
    async deleteSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/settings/`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes all settings for the logged-in user
     */
    async deleteSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSettingsRaw(initOverrides);
    }

    /**
     * lists authors
     */
    async getAllAuthorsRaw(requestParameters: GetAllAuthorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfAuthor>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/authors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfAuthorFromJSON(jsonValue));
    }

    /**
     * lists authors
     */
    async getAllAuthors(requestParameters: GetAllAuthorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfAuthor> {
        const response = await this.getAllAuthorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns the analyzed data for a revision
     */
    async getAnalyzedDataRaw(requestParameters: GetAnalyzedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelResultData>>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling getAnalyzedData.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling getAnalyzedData.');
        }

        const queryParameters: any = {};

        if (requestParameters.models !== undefined) {
            queryParameters['models'] = requestParameters.models;
        }

        if (requestParameters.sections !== undefined) {
            queryParameters['sections'] = requestParameters.sections;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/manuscripts/{manuscriptId}/revisions/{revisionId}/`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))).replace(`{${"revisionId"}}`, encodeURIComponent(String(requestParameters.revisionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelResultDataFromJSON));
    }

    /**
     * returns the analyzed data for a revision
     */
    async getAnalyzedData(requestParameters: GetAnalyzedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelResultData>> {
        const response = await this.getAnalyzedDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * return info about the current user
     */
    async getAuthorStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorStatusFromJSON(jsonValue));
    }

    /**
     * return info about the current user
     */
    async getAuthorStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorStatus> {
        const response = await this.getAuthorStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * returns the genres and audiences
     */
    async getCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/info/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryInfoFromJSON(jsonValue));
    }

    /**
     * returns the genres and audiences
     */
    async getCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryInfo> {
        const response = await this.getCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * lists of events for the author
     */
    async getHistoryRaw(requestParameters: GetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfHistoryEvent>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/history/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfHistoryEventFromJSON(jsonValue));
    }

    /**
     * lists of events for the author
     */
    async getHistory(requestParameters: GetHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfHistoryEvent> {
        const response = await this.getHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lists manuscript revisions for the current user
     */
    async getManuscriptRevisionsRaw(requestParameters: GetManuscriptRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfManuscriptRevision>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling getManuscriptRevisions.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/manuscripts/{manuscriptId}/revisions/`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfManuscriptRevisionFromJSON(jsonValue));
    }

    /**
     * lists manuscript revisions for the current user
     */
    async getManuscriptRevisions(requestParameters: GetManuscriptRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfManuscriptRevision> {
        const response = await this.getManuscriptRevisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lists manuscripts for the current user
     */
    async getManuscriptsRaw(requestParameters: GetManuscriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfManuscript>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/manuscripts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfManuscriptFromJSON(jsonValue));
    }

    /**
     * lists manuscripts for the current user
     */
    async getManuscripts(requestParameters: GetManuscriptsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfManuscript> {
        const response = await this.getManuscriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * gets a recommendation
     */
    async getRecommendationRaw(requestParameters: GetRecommendationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recommendation>> {
        if (requestParameters.metricId === null || requestParameters.metricId === undefined) {
            throw new runtime.RequiredError('metricId','Required parameter requestParameters.metricId was null or undefined when calling getRecommendation.');
        }

        if (requestParameters.genre === null || requestParameters.genre === undefined) {
            throw new runtime.RequiredError('genre','Required parameter requestParameters.genre was null or undefined when calling getRecommendation.');
        }

        if (requestParameters.audience === null || requestParameters.audience === undefined) {
            throw new runtime.RequiredError('audience','Required parameter requestParameters.audience was null or undefined when calling getRecommendation.');
        }

        if (requestParameters.metricValue === null || requestParameters.metricValue === undefined) {
            throw new runtime.RequiredError('metricValue','Required parameter requestParameters.metricValue was null or undefined when calling getRecommendation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/recommendations/{metricId}/{genre}/{audience}/{metricValue}`.replace(`{${"metricId"}}`, encodeURIComponent(String(requestParameters.metricId))).replace(`{${"genre"}}`, encodeURIComponent(String(requestParameters.genre))).replace(`{${"audience"}}`, encodeURIComponent(String(requestParameters.audience))).replace(`{${"metricValue"}}`, encodeURIComponent(String(requestParameters.metricValue))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecommendationFromJSON(jsonValue));
    }

    /**
     * gets a recommendation
     */
    async getRecommendation(requestParameters: GetRecommendationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recommendation> {
        const response = await this.getRecommendationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns currently logged-in users settings
     */
    async getSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuthorSetting>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/settings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthorSettingFromJSON));
    }

    /**
     * returns currently logged-in users settings
     */
    async getSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuthorSetting>> {
        const response = await this.getSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * saves settings logged-in user
     */
    async saveSettingsRaw(requestParameters: SaveSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/author/settings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.authorSetting.map(AuthorSettingToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * saves settings logged-in user
     */
    async saveSettings(requestParameters: SaveSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * Upload a manuscript
     */
    async uploadManuscriptRaw(requestParameters: UploadManuscriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManuscriptUploadResponse>> {
        if (requestParameters.manuscriptTitle === null || requestParameters.manuscriptTitle === undefined) {
            throw new runtime.RequiredError('manuscriptTitle','Required parameter requestParameters.manuscriptTitle was null or undefined when calling uploadManuscript.');
        }

        if (requestParameters.targetAudience === null || requestParameters.targetAudience === undefined) {
            throw new runtime.RequiredError('targetAudience','Required parameter requestParameters.targetAudience was null or undefined when calling uploadManuscript.');
        }

        if (requestParameters.targetGenre === null || requestParameters.targetGenre === undefined) {
            throw new runtime.RequiredError('targetGenre','Required parameter requestParameters.targetGenre was null or undefined when calling uploadManuscript.');
        }

        if (requestParameters.fileType === null || requestParameters.fileType === undefined) {
            throw new runtime.RequiredError('fileType','Required parameter requestParameters.fileType was null or undefined when calling uploadManuscript.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadManuscript.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.manuscriptTitle !== undefined) {
            formParams.append('manuscriptTitle', requestParameters.manuscriptTitle as any);
        }

        if (requestParameters.revisionTitle !== undefined) {
            formParams.append('revisionTitle', requestParameters.revisionTitle as any);
        }

        if (requestParameters.targetAudience !== undefined) {
            formParams.append('targetAudience', requestParameters.targetAudience as any);
        }

        if (requestParameters.targetGenre !== undefined) {
            formParams.append('targetGenre', requestParameters.targetGenre as any);
        }

        if (requestParameters.fileType !== undefined) {
            formParams.append('fileType', requestParameters.fileType as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/manuscripts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManuscriptUploadResponseFromJSON(jsonValue));
    }

    /**
     * Upload a manuscript
     */
    async uploadManuscript(requestParameters: UploadManuscriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManuscriptUploadResponse> {
        const response = await this.uploadManuscriptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a manuscript
     */
    async uploadManuscriptRevisionRaw(requestParameters: UploadManuscriptRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManuscriptUploadResponse>> {
        if (requestParameters.manuscriptId === null || requestParameters.manuscriptId === undefined) {
            throw new runtime.RequiredError('manuscriptId','Required parameter requestParameters.manuscriptId was null or undefined when calling uploadManuscriptRevision.');
        }

        if (requestParameters.targetAudience === null || requestParameters.targetAudience === undefined) {
            throw new runtime.RequiredError('targetAudience','Required parameter requestParameters.targetAudience was null or undefined when calling uploadManuscriptRevision.');
        }

        if (requestParameters.targetGenre === null || requestParameters.targetGenre === undefined) {
            throw new runtime.RequiredError('targetGenre','Required parameter requestParameters.targetGenre was null or undefined when calling uploadManuscriptRevision.');
        }

        if (requestParameters.fileType === null || requestParameters.fileType === undefined) {
            throw new runtime.RequiredError('fileType','Required parameter requestParameters.fileType was null or undefined when calling uploadManuscriptRevision.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadManuscriptRevision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.revisionTitle !== undefined) {
            formParams.append('revisionTitle', requestParameters.revisionTitle as any);
        }

        if (requestParameters.targetAudience !== undefined) {
            formParams.append('targetAudience', requestParameters.targetAudience as any);
        }

        if (requestParameters.targetGenre !== undefined) {
            formParams.append('targetGenre', requestParameters.targetGenre as any);
        }

        if (requestParameters.fileType !== undefined) {
            formParams.append('fileType', requestParameters.fileType as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/manuscripts/{manuscriptId}/revisions/`.replace(`{${"manuscriptId"}}`, encodeURIComponent(String(requestParameters.manuscriptId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManuscriptUploadResponseFromJSON(jsonValue));
    }

    /**
     * Upload a manuscript
     */
    async uploadManuscriptRevision(requestParameters: UploadManuscriptRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManuscriptUploadResponse> {
        const response = await this.uploadManuscriptRevisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AdminGetManuscriptsSortByEnum = {
    GlobalScore: 'globalScore',
    LatestRevision: 'latestRevision'
} as const;
export type AdminGetManuscriptsSortByEnum = typeof AdminGetManuscriptsSortByEnum[keyof typeof AdminGetManuscriptsSortByEnum];
/**
 * @export
 */
export const UploadManuscriptFileTypeEnum = {
    Text: 'TEXT',
    Docx: 'DOCX',
    Epub: 'EPUB'
} as const;
export type UploadManuscriptFileTypeEnum = typeof UploadManuscriptFileTypeEnum[keyof typeof UploadManuscriptFileTypeEnum];
/**
 * @export
 */
export const UploadManuscriptRevisionFileTypeEnum = {
    Text: 'TEXT',
    Docx: 'DOCX',
    Epub: 'EPUB'
} as const;
export type UploadManuscriptRevisionFileTypeEnum = typeof UploadManuscriptRevisionFileTypeEnum[keyof typeof UploadManuscriptRevisionFileTypeEnum];
