/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelResultData
 */
export interface ModelResultData {
    /**
     * Name of the model
     * @type {string}
     * @memberof ModelResultData
     */
    model: string;
    /**
     * Name of the section within the model
     * @type {string}
     * @memberof ModelResultData
     */
    section?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelResultData
     */
    status: ModelResultDataStatusEnum;
    /**
     * Lots of unstructured data
     * @type {any}
     * @memberof ModelResultData
     */
    content?: any | null;
}


/**
 * @export
 */
export const ModelResultDataStatusEnum = {
    Pending: 'PENDING',
    Processing: 'PROCESSING',
    Done: 'DONE',
    Error: 'ERROR'
} as const;
export type ModelResultDataStatusEnum = typeof ModelResultDataStatusEnum[keyof typeof ModelResultDataStatusEnum];


/**
 * Check if a given object implements the ModelResultData interface.
 */
export function instanceOfModelResultData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ModelResultDataFromJSON(json: any): ModelResultData {
    return ModelResultDataFromJSONTyped(json, false);
}

export function ModelResultDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelResultData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'model': json['model'],
        'section': !exists(json, 'section') ? undefined : json['section'],
        'status': json['status'],
        'content': !exists(json, 'content') ? undefined : json['content'],
    };
}

export function ModelResultDataToJSON(value?: ModelResultData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model': value.model,
        'section': value.section,
        'status': value.status,
        'content': value.content,
    };
}

