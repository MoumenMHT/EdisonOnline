/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * information about an author
 * @export
 * @interface Author
 */
export interface Author {
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    username?: string;
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    complimentaryUploadsRemaining: number;
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    purchasedUploadsRemaining: number;
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    subscriptionUploadsRemaining: number;
    /**
     * 
     * @type {boolean}
     * @memberof Author
     */
    restrictedModels: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Author
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof Author
     */
    updated: Date;
}

/**
 * Check if a given object implements the Author interface.
 */
export function instanceOfAuthor(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "complimentaryUploadsRemaining" in value;
    isInstance = isInstance && "purchasedUploadsRemaining" in value;
    isInstance = isInstance && "subscriptionUploadsRemaining" in value;
    isInstance = isInstance && "restrictedModels" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;

    return isInstance;
}

export function AuthorFromJSON(json: any): Author {
    return AuthorFromJSONTyped(json, false);
}

export function AuthorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Author {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'complimentaryUploadsRemaining': json['complimentaryUploadsRemaining'],
        'purchasedUploadsRemaining': json['purchasedUploadsRemaining'],
        'subscriptionUploadsRemaining': json['subscriptionUploadsRemaining'],
        'restrictedModels': json['restrictedModels'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
    };
}

export function AuthorToJSON(value?: Author | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'email': value.email,
        'nickname': value.nickname,
        'username': value.username,
        'complimentaryUploadsRemaining': value.complimentaryUploadsRemaining,
        'purchasedUploadsRemaining': value.purchasedUploadsRemaining,
        'subscriptionUploadsRemaining': value.subscriptionUploadsRemaining,
        'restrictedModels': value.restrictedModels,
        'created': (value.created.toISOString()),
        'updated': (value.updated.toISOString()),
    };
}

