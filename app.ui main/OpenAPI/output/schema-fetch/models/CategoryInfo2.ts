/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IdName } from './IdName';
import {
    IdNameFromJSON,
    IdNameFromJSONTyped,
    IdNameToJSON,
} from './IdName';
import type { MatchText } from './MatchText';
import {
    MatchTextFromJSON,
    MatchTextFromJSONTyped,
    MatchTextToJSON,
} from './MatchText';

/**
 * 
 * @export
 * @interface CategoryInfo2
 */
export interface CategoryInfo2 {
    /**
     * 
     * @type {Array<IdName>}
     * @memberof CategoryInfo2
     */
    metrics: Array<IdName>;
    /**
     * 
     * @type {Array<IdName>}
     * @memberof CategoryInfo2
     */
    audiences: Array<IdName>;
    /**
     * 
     * @type {Array<IdName>}
     * @memberof CategoryInfo2
     */
    genres: Array<IdName>;
    /**
     * 
     * @type {MatchText}
     * @memberof CategoryInfo2
     */
    audienceMatch: MatchText;
    /**
     * 
     * @type {MatchText}
     * @memberof CategoryInfo2
     */
    genreMatch: MatchText;
}

/**
 * Check if a given object implements the CategoryInfo2 interface.
 */
export function instanceOfCategoryInfo2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metrics" in value;
    isInstance = isInstance && "audiences" in value;
    isInstance = isInstance && "genres" in value;
    isInstance = isInstance && "audienceMatch" in value;
    isInstance = isInstance && "genreMatch" in value;

    return isInstance;
}

export function CategoryInfo2FromJSON(json: any): CategoryInfo2 {
    return CategoryInfo2FromJSONTyped(json, false);
}

export function CategoryInfo2FromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryInfo2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metrics': ((json['metrics'] as Array<any>).map(IdNameFromJSON)),
        'audiences': ((json['audiences'] as Array<any>).map(IdNameFromJSON)),
        'genres': ((json['genres'] as Array<any>).map(IdNameFromJSON)),
        'audienceMatch': MatchTextFromJSON(json['audienceMatch']),
        'genreMatch': MatchTextFromJSON(json['genreMatch']),
    };
}

export function CategoryInfo2ToJSON(value?: CategoryInfo2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metrics': ((value.metrics as Array<any>).map(IdNameToJSON)),
        'audiences': ((value.audiences as Array<any>).map(IdNameToJSON)),
        'genres': ((value.genres as Array<any>).map(IdNameToJSON)),
        'audienceMatch': MatchTextToJSON(value.audienceMatch),
        'genreMatch': MatchTextToJSON(value.genreMatch),
    };
}

