/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ManuscriptStatus } from './ManuscriptStatus';
import {
    ManuscriptStatusFromJSON,
    ManuscriptStatusFromJSONTyped,
    ManuscriptStatusToJSON,
} from './ManuscriptStatus';

/**
 * Information about the status and progress of analyzing a manuscript
 * @export
 * @interface ManuscriptProgress
 */
export interface ManuscriptProgress {
    /**
     * 
     * @type {ManuscriptStatus}
     * @memberof ManuscriptProgress
     */
    status: ManuscriptStatus;
    /**
     * 
     * @type {number}
     * @memberof ManuscriptProgress
     */
    modelsDone: number;
    /**
     * 
     * @type {number}
     * @memberof ManuscriptProgress
     */
    modelsTotal: number;
    /**
     * 
     * @type {number}
     * @memberof ManuscriptProgress
     */
    errors: number;
    /**
     * when non-null this is the number of manuscripts before this one in queue on the assigned server
     * @type {number}
     * @memberof ManuscriptProgress
     */
    positionInQueue?: number;
    /**
     * 
     * @type {number}
     * @memberof ManuscriptProgress
     */
    globalScore?: number;
    /**
     * 
     * @type {number}
     * @memberof ManuscriptProgress
     */
    userScore?: number;
}

/**
 * Check if a given object implements the ManuscriptProgress interface.
 */
export function instanceOfManuscriptProgress(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "modelsDone" in value;
    isInstance = isInstance && "modelsTotal" in value;
    isInstance = isInstance && "errors" in value;

    return isInstance;
}

export function ManuscriptProgressFromJSON(json: any): ManuscriptProgress {
    return ManuscriptProgressFromJSONTyped(json, false);
}

export function ManuscriptProgressFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManuscriptProgress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': ManuscriptStatusFromJSON(json['status']),
        'modelsDone': json['modelsDone'],
        'modelsTotal': json['modelsTotal'],
        'errors': json['errors'],
        'positionInQueue': !exists(json, 'positionInQueue') ? undefined : json['positionInQueue'],
        'globalScore': !exists(json, 'globalScore') ? undefined : json['globalScore'],
        'userScore': !exists(json, 'userScore') ? undefined : json['userScore'],
    };
}

export function ManuscriptProgressToJSON(value?: ManuscriptProgress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': ManuscriptStatusToJSON(value.status),
        'modelsDone': value.modelsDone,
        'modelsTotal': value.modelsTotal,
        'errors': value.errors,
        'positionInQueue': value.positionInQueue,
        'globalScore': value.globalScore,
        'userScore': value.userScore,
    };
}

