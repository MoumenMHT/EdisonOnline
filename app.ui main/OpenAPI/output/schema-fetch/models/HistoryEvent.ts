/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HistoryEventType } from './HistoryEventType';
import {
    HistoryEventTypeFromJSON,
    HistoryEventTypeFromJSONTyped,
    HistoryEventTypeToJSON,
} from './HistoryEventType';

/**
 * history event
 * @export
 * @interface HistoryEvent
 */
export interface HistoryEvent {
    /**
     * 
     * @type {Date}
     * @memberof HistoryEvent
     */
    eventTime: Date;
    /**
     * 
     * @type {HistoryEventType}
     * @memberof HistoryEvent
     */
    eventType: HistoryEventType;
    /**
     * 
     * @type {string}
     * @memberof HistoryEvent
     */
    eventSubType: string;
    /**
     * 
     * @type {string}
     * @memberof HistoryEvent
     */
    message: string;
}

/**
 * Check if a given object implements the HistoryEvent interface.
 */
export function instanceOfHistoryEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "eventTime" in value;
    isInstance = isInstance && "eventType" in value;
    isInstance = isInstance && "eventSubType" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function HistoryEventFromJSON(json: any): HistoryEvent {
    return HistoryEventFromJSONTyped(json, false);
}

export function HistoryEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoryEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventTime': (new Date(json['eventTime'])),
        'eventType': HistoryEventTypeFromJSON(json['eventType']),
        'eventSubType': json['eventSubType'],
        'message': json['message'],
    };
}

export function HistoryEventToJSON(value?: HistoryEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventTime': (value.eventTime.toISOString()),
        'eventType': HistoryEventTypeToJSON(value.eventType),
        'eventSubType': value.eventSubType,
        'message': value.message,
    };
}

