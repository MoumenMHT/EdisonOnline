/* tslint:disable */
/* eslint-disable */
/**
 * Edison Backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorListItem } from './AuthorListItem';
import {
    AuthorListItemFromJSON,
    AuthorListItemFromJSONTyped,
    AuthorListItemToJSON,
} from './AuthorListItem';
import type { ManuscriptProgress } from './ManuscriptProgress';
import {
    ManuscriptProgressFromJSON,
    ManuscriptProgressFromJSONTyped,
    ManuscriptProgressToJSON,
} from './ManuscriptProgress';

/**
 * Information about a manuscript
 * @export
 * @interface Manuscript
 */
export interface Manuscript {
    /**
     * 
     * @type {string}
     * @memberof Manuscript
     */
    id: string;
    /**
     * 
     * @type {AuthorListItem}
     * @memberof Manuscript
     */
    author: AuthorListItem;
    /**
     * 
     * @type {string}
     * @memberof Manuscript
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Manuscript
     */
    audience: string;
    /**
     * 
     * @type {string}
     * @memberof Manuscript
     */
    genre: string;
    /**
     * 
     * @type {ManuscriptProgress}
     * @memberof Manuscript
     */
    progress: ManuscriptProgress;
    /**
     * 
     * @type {Date}
     * @memberof Manuscript
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof Manuscript
     */
    latestRevision: Date;
}

/**
 * Check if a given object implements the Manuscript interface.
 */
export function instanceOfManuscript(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "audience" in value;
    isInstance = isInstance && "genre" in value;
    isInstance = isInstance && "progress" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "latestRevision" in value;

    return isInstance;
}

export function ManuscriptFromJSON(json: any): Manuscript {
    return ManuscriptFromJSONTyped(json, false);
}

export function ManuscriptFromJSONTyped(json: any, ignoreDiscriminator: boolean): Manuscript {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'author': AuthorListItemFromJSON(json['author']),
        'title': json['title'],
        'audience': json['audience'],
        'genre': json['genre'],
        'progress': ManuscriptProgressFromJSON(json['progress']),
        'created': (new Date(json['created'])),
        'latestRevision': (new Date(json['latestRevision'])),
    };
}

export function ManuscriptToJSON(value?: Manuscript | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'author': AuthorListItemToJSON(value.author),
        'title': value.title,
        'audience': value.audience,
        'genre': value.genre,
        'progress': ManuscriptProgressToJSON(value.progress),
        'created': (value.created.toISOString()),
        'latestRevision': (value.latestRevision.toISOString()),
    };
}

